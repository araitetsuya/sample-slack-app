service: my-slack

frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1
  tags:
    service: my-slack
  runtime: nodejs20.x
  timeout: 25
  versionFunctions: false
  environment:
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    SLACK_BOT_TOKEN: ${env:SLACK_BOT_TOKEN}

  httpApi:
    shouldStartNameWithService: true
    disableDefaultEndpoint: true

functions:
  invokeBolt:
    name: ${self:service}-${sls:stage}-invoke-bolt
    handler: app.accept
    events:
      - httpApi:
          method: post
          path: /slack/events
    iamRoleStatementsName: ${self:service}-${sls:stage}-invoke-bolt-lambda
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: {
          Fn::GetAtt: ['RunBoltLambdaFunction','Arn']
        }
    environment:
      BOLT_LAMBDA_FUNCTION_ARN: {
        Fn::GetAtt: ['RunBoltLambdaFunction','Arn']
      }

  runBolt:
    name: ${self:service}-${sls:stage}-run-bolt
    handler: app.handler
    iamRoleStatementsName: ${self:service}-${sls:stage}-run-bolt-lambda
    iamRoleStatements:

plugins:
  - serverless-iam-roles-per-function